from scipy.special import binom

def main():
    compress_cipher = [0x43, 0x26, 0xc7, 0x31, 0x59, 0xe8, 0x9d, 0x09, 0x29, 0x7a, 0xe5, 0x24, 0xa6, 0x22, 0x1a]111
    start_encrypted = [0xc5, 0x5b, 0xfc, 0x43, 0x88] #the 'GH19{' Cipher
    for x in range(len(compress_cipher)):
        start_encrypted.append(new_byte([start_encrypted[i+x] for i in range(5)], compress_cipher[x]))
    print(decrypt(start_encrypted))

def new_byte(l, f_c):
    decompress_byte = f_c
    for k in range(len(l)):
        decompress_byte -= l[k]*int(binom(5, k))
    return decompress_byte%256

def decrypt(l):
    entry_bloc = [0x80, 0x00, 0x40, 0x80, 0x00, 0x40, 0x80, 0x00, 0x40, 0x80, 0x00, 0x40, 0x80, 0x00, 0x40, 0x80, 0x00, 0x40, 0x80, 0x00, 0x40]
    magic_number_elf = [0x45, 0x4c, 0x46, 0x45, 0x4c, 0x46, 0x45, 0x4c, 0x46, 0x45, 0x4c, 0x46, 0x45, 0x4c, 0x46, 0x45, 0x4c, 0x46, 0x45, 0x4c, 0x46]

    decrypt_step_1 = [(x-y)%256 for x,y in zip(l,magic_number_elf)]
    decrypt_step_2 = [x^0x7f for x in decrypt_step_1]
    decrypt_step_3 = [(x+y)%256 for x,y in zip(decrypt_step_2, entry_bloc)]
    decrypt_step_4 = [x^0x38 for x in decrypt_step_3]

    return [chr(x) for x in decrypt_step_4]

main()


